# -*- coding: utf-8 -*-
"""python_programming_and_data_analysis_ch2_4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ObJKfd4XAdmfHFZD53fasOxgGIDaqpAC

## 2.4 Pandas入門

### 共通処理
"""

# 日本語化ライブラリ導入
!pip install japanize-matplotlib | tail -n 1

# 事前処理

# 必要ライブラリのimport
import numpy as np

# Matplotlib中のpyplotライブラリのインポート
import matplotlib.pyplot as plt

# matplotlib日本語化対応ライブラリのインポート
import japanize_matplotlib

# NumPy表示形式の設定
np.set_printoptions(
    suppress=True, precision=4, floatmode='fixed'
)

# グラフのデフォルトフォント指定
plt.rcParams["font.size"] = 14

# サイズ設定
plt.rcParams['figure.figsize'] = (6, 6)

"""### 2.4.2 ライブラリ利用

#### ライブラリのインポート
"""

# ライブラリのインポート

# pandas用ライブラリ
import pandas as pd

# データフレーム表示用関数
from IPython.display import display

"""#### パラメータ初期化"""

# パラメータ初期化

# データフレームでの表示精度
# 浮動小数点数型のデータ表示を小数点以下４桁で固定
pd.options.display.float_format = '{:.4f}'.format

# データフレームですべての項目を表示
pd.set_option("display.max_columns",None)

"""### 2.4.3 データ定義

#### データフレーム定義
"""

# 2重リスト変数の定義
data1 = [
    ['田中優花' ,'女', 140, 40.5],
    ['佐藤和也', '男', 175, 70.2],
    ['鈴木一郎', '男', 170, 65.0],
    ['高橋美香', '女', 158, 55.6],
]

# 結果確認
print(data1)

# データフレームの定義
df1 = pd.DataFrame(
    data1, columns=['氏名', '性別', '身長', '体重']
)

# 型表示
print(type(df1))
print()

# display関数による整形表示
display(df1)

print()
print(df1)

# データフレームの各部品表示

# 列インデックスと行インデックス
print('列インデックス', list(df1.columns))
print()

print('行インデックス', list(df1.index))
print()

# データの値
print('データの値')
print(df1.values)

"""#### CSVファイルの読み込み"""

# CSVファイルの名称とURL
csv_fn = 'df-sample.csv'
csv_url = 'https://raw.githubusercontent.com/makaishi2/samples/main/data/' + csv_fn

print(csv_fn)
print(csv_url)

# インターネット上のCSVファイルをダウンロード
!wget -nc $csv_url

# ダウンロードしたファイルの内容表示
!cat $csv_fn

# CSVファイルからの読み込み

# データ読み込み
df2 = pd.read_csv(csv_fn)

# 結果確認
display(df2)

# URLを直接指定することも可能
print(csv_url)

df3 = pd.read_csv(csv_url)

display(df3)

"""#### Excelファイルの読み込み"""

# Excelファイルからの読み込み

# 読み込み元URL
excel_url = 'https://github.com/makaishi2/samples/raw/main/data/df-sample.xlsx'

# データ読み込み
df4 = pd.read_excel(excel_url)

# 結果確認
display(df4)

"""#### Series定義"""

# リスト変数によるSeries変数定義
s1 = pd.Series(
    [140, 175, 170, 158],
    name='身長')

print(type(s1))
print(s1)

# データフレームの特定列からSeries変数を抽出
s2 = df2['身長']

print(type(s2))
print(s2)

# データフレームの特定行からSeries変数を抽出
s3 = df2.loc[1]

print(type(s3))
print(s3)

"""### 2.4.4 参照"""

# 処理対象データフレームの確認
display(df2)

"""#### データ型確認"""

# 各項目のデータ型確認
print(df2.dtypes)

"""#### 列絞り込み"""

# 列リストで部分表を抽出

# 抽出したい項目名のリストを準備
cols = ['身長', '体重']

#  <変数名>　[cols]の形で列抽出
df5 = df2[cols]

# 結果確認
display(df5)

"""#### 行絞り込み"""

# headメソッドで先頭n行の抽出
display(df2.head(2))

display(df2.tail(3))

# index1: 「性別が男]の判断
index1 = df2['性別'] == '男'
print(index1)

# index1で行を絞り込む
df6 = df2[index1]
display(df6)

index10 = df2['性別'] != '男'
df60 = df2[index10]
display(df60)

# まとめて1行で表現
df7 = df2[df2['性別'] == '男']
display(df7)

"""### 2.4.5 操作"""

display(df2)
print(df2.dtypes)

"""#### 列削除"""

# 項目「氏名」を削除する

# データをコピーしてオリジナルに影響を与えないようにする
df9 = df2.copy()

# 項目「氏名」を削除し、結果をdf9に代入
df9 = df9.drop('氏名', axis=1)

# 結果を確認
display(df9)

"""#### 列追加"""

# BMI値の計算
s4 = df2['体重'] / ((df2['身長']/100) ** 2)

# 結果確認
print(s4)

# BMI列の追加

# データコピー
df10 = df2.copy()

# 列追加
df10['BMI'] = s4

# 結果確認
display(df10)

# BM列の追加　insertメソッドによる方法

# データコピー
df10 = df2.copy()

# 列追加
df10.insert(2, 'BMI', s4)

# 結果確認
display(df10)

"""#### 列結合"""

# 年齢データの入手
s5 = pd.Series(np.array([10, 25, 45, 34]), name='年齢')
print(s5)

# 既存データフレームに新しい列の追加
df11 = pd.concat([df10, s5], axis=1)

# 結果確認
display(df11)

"""#### 行追加"""

# 新しい行の追加
df12 = df2.append({
    '氏名': '山田太郎', '性別': '男', '身長': 165, '体重': 64.2},
    ignore_index=True)

# 結果確認
display(df12)

"""### 演習問題

(1)
次のような変数data1, data2, columnsが定義されているとき、この変数を使って、データフレーム変数df1とdf2を定義して下さい。  
data1とdata2はデータフレームのデータに該当する部分、columnsは項目名のリストとします。

```
data1 = [
['田中優花' ,'女', 140, 40.5],
['佐藤和也', '男', 175, 70.2],
]
data2 = [
['鈴木一郎', '男', 170, 65.0],
['高橋美香', '女', 158, 55.6]
]
columns=['氏名', '性別', '身長', '体重']
```

(2)
df1とdf2をタテ方向に連結して、新しいデータフレームdf3を作りなさい。
"""

# 初期データの宣言
data1 = [
['田中優花' ,'女', 140, 40.5],
['佐藤和也', '男', 175, 70.2],
]

data2 = [
['鈴木一郎', '男', 170, 65.0],
['高橋美香', '女', 158, 55.6]
]

columns=['氏名', '性別', '身長', '体重']

# (1)の解答
df1 = pd.DataFrame(
    data1, columns=columns
)
df2 = pd.DataFrame(
    data2, columns=columns
)

# (1)の結果確認
display(df1)
display(df2)

# (2)の解答
df3 = df1.append(
    df2,
    ignore_index=True
)



# (2)の結果確認
display(df3)

# (2)の解答
df3 = pd.concat(
    [df1, df2], axis=0,
    # ignore_index=True
)



# (2)の結果確認
display(df3)

