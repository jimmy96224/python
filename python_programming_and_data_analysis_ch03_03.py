# -*- coding: utf-8 -*-
"""python_programming_and_data_analysis_ch03_03

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14jI159-WZE14OC3RganzntyQIqy4NlG4

## 3.3 データ前処理

### 共通処理
"""

# 日本語化ライブラリ導入
!pip install japanize-matplotlib | tail -n 1

# ライブラリのimport

# NumPy用ライブラリ
import numpy as np

# Matplotlib中のpyplotライブラリのインポート
import matplotlib.pyplot as plt

# matplotlib日本語化対応ライブラリのインポート
import japanize_matplotlib

# pandas用ライブラリ
import pandas as pd

# データフレーム表示用関数
from IPython.display import display

# 表示オプション調整

# NumPy表示形式の設定
np.set_printoptions(
    suppress=True, precision=4, floatmode='fixed'
)

# グラフのデフォルトフォント指定
plt.rcParams["font.size"] = 14

# サイズ設定
plt.rcParams['figure.figsize'] = (6, 6)

# 方眼表示ON
plt.rcParams['axes.grid'] = True

# データフレームでの表示精度
pd.options.display.float_format = '{:.4f}'.format

# データフレームですべての項目を表示
pd.set_option("display.max_columns",None)

"""### 3.3.1 実習の前提条件

#### CSV ファイル読み込み
"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/bridges/bridges.data.version1'

# 列名定義
columns = [
 'ID', 'RIVER', 'LOCATION', 'ERECTED', 'PURPOSE',
 'LENGTH', 'LANES', 'CLEAR-G', 'T-OR-D', 'MATERIAL',
 'SPAN', 'REL-L', 'TYPE'
]

# データ読み込み
df1 = pd.read_csv(
    url, header=None,
    names=columns, na_values='?',
    index_col='ID')
display(df1.head())

"""  ### 3.3.2 項目名変更"""

# 差し替え用項目名リスト
cols_jp = [
    '川コード', '位置', '竣工年', '目的', '長さ', '車線数', '垂直クリアランス',
    '道路位置', '建築資材', '長さ区分', '相対長', '橋種別'
]

# 加工用の別データフレームの用意
df2 = df1.copy()

# 列名の差し替え
df2.columns = cols_jp

# 結果確認
display(df2.head())

"""### 3.3.3 欠損値

#### 欠損値確認
"""

# isnullメソッドで各要素ごとにNULLかどうかを判断
df2.isnull()

# isnullメソッドの結果に対してsumメソッドをかけると、
# 項目単位で何件NULLがあったかがわかる
# （メソッドチェイン呼び出し)
df2.isnull().sum()

# isnullメソッドで各要素ごとにNULLかどうかを判断
df2.notnull()

# isnullメソッドの結果に対してsumメソッドをかけると、
# 項目単位で何件NULLがあったかがわかる
# （メソッドチェイン呼び出し)
df2.notnull().sum()

"""☞データ分析のためのポイント  
欠損値確認　.isnull().sum() とセットで一つのメソッドとして覚える

#### 欠損値除去
"""

# 項目「位置」に欠損値がある行を削除する
df3 = df2.copy()
df3 = df3.dropna(subset=['位置'])
df3.isnull().sum()

# 項目「位置」に欠損値がある行を削除する
df35 = df2.copy()
df35 = df3.dropna()
df35.isnull().sum()

"""### 3.3.4 データ型"""

# 各項目のデータ型確認
df3.dtypes

# 「位置」のデータ型を整数型に直す
df3['位置'] = df3['位置'].astype('int')
print(df3.dtypes)
display(df3.head(2))

# 欠損値をなくす前のdf2では、この処理はできない
df2['位置'] = df2['位置'].astype('int')

"""☞データ分析のためのポイント  
**本来整数型の項目が浮動小数点型になっている場合は欠損値があることを疑う**

### 3.3.5 統計量計算(describeメソッド)
"""

# 引数なしのdescribeメソッド呼び出し
df2.describe()

# 文字列型項目へのdescribeメソッド呼び出し
df2.describe(include='O')

"""### 3.3.6 値の出現回数 (value_countsメソッド)"""

# 値の出現回数カウント
df2['建築資材'].value_counts()

"""### 3.3.7 特徴量計算(mapメソッド)"""

# 西暦年から1から4までの竣工年区分を返す関数
def get_year_cd(x):
    thres = [1850, 1900, 1950]
    thres_np = np.array(thres)
    return (thres_np < x).sum() + 1

# map関数を使い、すべての行に対して「竣工年区分」を計算
df3['竣工年'].map(get_year_cd)

# 新しい特徴量「竣工年区分」の計算
df3['竣工年区分'] = df3['竣工年'].map(get_year_cd)

display(df3.head(2))
display(df3.tail(4))

"""☞データ分析のためのポイント    
特定の項目からの計算によって新しい項目を作りたい場合、計算用関数を用意してmapメソッドにその関数を渡す

### 演習問題

ここまで加工したデータフレームdf3について、更に次の処理をして下さい。  
(1) 「車線数」の欠損値を取り除きます。  
(2) 「車線数」を整数値に変換します。
"""

# (1) 「車線数」の欠損値を取り除く
# データフレームコピー
df4 = df3.copy()

# 車線数の欠損値除去
df4 = df4.dropna(subset=['車線数'])

# 結果確認
df4.isnull().sum()

df4.dtypes

# (2)　「車線数」のデータ型を整数型に変換する
# データフレームコピー
df5 = df4.copy()

# データ型の変換
df5['車線数'] = df5['車線数'].astype('int')

# 結果確認
print(df5.dtypes)
df5.head(2)