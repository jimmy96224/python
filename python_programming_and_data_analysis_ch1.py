# -*- coding: utf-8 -*-
"""python programming and data analysis ch1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEnKETMvNpyGg3dmEwpZLEMtQq8TkXgz

## 1.2 階乗計算
"""

# 階乗計算

# ループカウントNの定義
N = 10

# 階乗結果の保存先
fact = 1

# ループ処理
for i in range(1, N + 1):

    # 階乗計算
    fact *= i

   # 結果表示
    print(i, 'の階乗は', fact)

# 階乗計算

# ループカウントNの定義
N = 60

# 階乗結果の保存先
fact = 1

# ループ処理
for i in range(1, N + 1):

    # 階乗計算
    fact *= i

   # 結果表示
    print(i, 'の階乗は', fact)

"""演習問題"""

a = 3
b = 10

c = b - a

print(a)
print(b)
print(c)

a = 1000
b = 2000
c = 3000

d = a % 7

d += b % 7

d += c % 7

print(d)

x = 12

if x >= 10 and x % 3 == 0:
    print('Success!')
else:
    print('Fail!')

"""elseにも : <br>
文字列は ' '
"""



x = 9

if x >= 10 and x % 3 == 0:
    print('Success!')
else:
    print('Fail!')



x = 13

if x >= 10 and x % 3 == 0:
    print('Success!')
else:
    print('Fail!')

x = 15

if x >= 10 and x % 3 == 0:
    print('Success!')
else:
    print('Fail!')

s1 = 'I like an apple.'
 s2 = 'apple'

 p1 = s1. find(s2)

 print(p1)



s1 = 'I like an apple.'
 s2 = 'orange'

 p1 = s1. find(s2)

 print(p1)

"""find メソッドは、検索対象の文字列が存在しない場合、「-1」を返す"""

s1 = 'I like an apple.'
 s2 = 'apple'

if s2 == 'apple' and s1.find(s2) != -1:
    print('I like an apple.はappleを含んでいます。')
elif  s2 == 'orange' and s1.find(s2) == -1:
    print('I like an apple.はorangeを含んでいません。')

s1 = 'I like an apple.'
 s2 = 'apple'

if s1.find(s2) >= 0:
    m1 = 'を含んでいます。'
else:
    m1 = 'を含んでいません。'

print(s1, 'は', s2, m1)

s1 = 'サンプル文字列'

N = len(s1)

for i in range(N):
    print(i+1, '番目の文字は', s1[i])

"""for i ***in*** range(N):<br>
print(**i+1**, '番目の文字は', s1[i])　→インデックスは0始まりのため
"""

data = [
    ('T254', 12),
    ('A727', 6),
    ('T256', 4),
    ('T254', 10),
    ('A726', 7),
    ('A727', 4),
]

d2 = {}

data = [
    ('T254', 12),
    ('A727', 6),
    ('T256', 4),
    ('T254', 10),
    ('A726', 7),
    ('A727', 4),
]

d2 = {}

for key, value in data:
    if key in d2.keys():
        d2[key] += value
    else:
        d2[key] = value

print(d2)



data = [
    ('T254', 12),
    ('A727', 6),
    ('T256', 4),
    ('T254', 10),
    ('A726', 7),
    ('A727', 4),
]



for key, value in data:
    if key in d2.keys():
        d2[key] += value
    else:
        d2[key] = value

print(d2)

data = [
    ('T254', 12),
    ('A727', 6),
    ('T256', 4),
    ('T254', 10),
    ('A726', 7),
    ('A727', 4),
]



for key, value in data:
    if key in d2.keys():
        d2[key] += value
    else:
        d2[key] = value

d2 = {}

print(d2)

"""### 演習問題

(1) 「章番号:章タイトル」の書式の文字列を引数とし「:」によって文字列を章番号、章タイトルに分ける関数div_titleを定義して下さい。  

(2) 上で定義した関数を用いて、次の文字列をそれぞれ章番号、章タイトルに分割し、更に章番号を「キー」に、章タイトルを「値」にする辞書title_dictに登録して下さい。  

'1章:業務と機械学習プロジェクト'  
'2章:機械学習モデルの処理パターン'  
'3章:機械学習モデルの開発手順'  


"""

# (1)の解答
# 関数定義

def div_chapter(line):
    p = line.find(':')
    chapter = line[:p]
    title = line[p + 1:]
    return chapter, title

# (1)のテスト

l1 = '1章:業務と機械学習プロジェクト'
c1, t1 = div_chapter(l1)
print('章番号: ', c1, '  章タイトル: ', t1)

# (2)の解答
# 空の辞書の定義
title_dict = {}

# 処理対象テキストのリスト
title_list = [
    '1章:業務と機械学習プロジェクト',
    '2章:機械学習モデルの処理パターン',
    '3章:機械学習モデルの開発手順'
]

# ループ処理
for line in title_list:
    # 対象テキストを章番号と章タイトルに分離
    chapter, title = div_chapter(line)
    # 分離結果を用いて辞書登録
    title_dict[chapter] = title

# (2)の結果テスト

print('3章', title_dict['3章'])

"""### コラム　関数内の変数について"""

# 関数内変数の参照

def add1(x, y):
    z = x + y
    return z

z = 10
print(add1(1, 2))
print(z)

# 関数内部から関数外部の値を参照

def add2(x):
    w = x + z
    return w

z = 10
print(add2(1))

# 関数内部から関数外部の値を変更しようとした場合

def add3(x):
    w = x + z
    z = w
    return w

z = 10
print(add3(1))

"""### 演習課題
cabins = ['B5', 'C22', 'G6']を処理対象として、各要素の文字列の長さを要素にした新しいリストlengthsを作って下さい。
"""

# 処理対象のリスト
cabins = ['B5', 'C22', 'G6']

# 内包表記を用いて新しいリストlengthsを作る

lengths = [len(x) for x in cabins]


# 結果の確認
print(lengths)

