# -*- coding: utf-8 -*-
"""python programming and data analysis ch2.2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ELYzhTdUU6dnJ_fr7GG-LyMC2omM90Dc

## 2.2 numpy入門

### 2.2.2 ライブラリ利用
"""

# NumPyのインポート

import numpy as np

"""as np = エイリアス指定（慣習的に決められている作法）<br>alias 別名


"""

# デフォルト設定でのprint関数出力結果

x = np.array([2/7, 1000/7, 0.00304567])
print(x)

# NumPy表示形式の設定
#
# suppress=True　: 固定小数点表示
# precision=4　: 小数点以下4桁
#　floatmode='fixed' : 最終桁が0でも明示的に表示

np.set_printoptions(
    suppress=True, precision=4, floatmode='fixed'
)

print(x)

"""### 2.2.3 データ定義

#### array関数
"""

# array関数によるベクトル変数の定義
n1 = np.array([1, 7, 5, 2])

# 結果確認
print(n1)

# NumPy変数の性質確認

# 型確認
print(type(n1))

# 要素数確認
print(n1.shape)

print(n1.dtype)

# もう1つの方法
print(len(n1))

"""nd = N-dimensional"""

# array関数による表形式の変数の定義
n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])

# 結果確認
print(n2)

# 表形式のNumPy型データの性質確認

# 要素数確認
print(n2.shape)

# もう1つの方法
print(len(n2))

"""#### 数値配列の生成"""

# linspace関数による数値配列

# 等間隔に点を取る
# 点の数が第3の引数
# (植木算になる点に注意)
n3 = np.linspace(0, 2, 11)

# 結果確認
print(n３)

# arange関数による数値配列

# 等間隔に点を取る
# 間隔値が第3の引数
# (第2引数はmaxでなく「未満」であることに注意)
n4 = np.arange(0, 2.2, 0.2)

# 結果確認
print(n4)

"""### 2.2.4 参照

#### 行列定義
"""

# array関数による表形式の変数の定義

n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])

# 結果確認
print(n2)

"""#### 特定の要素の抽出"""

# 1行目2列目の要素指定
n5 = n2[1, 2]
print(n5)

"""#### 元行列の部分集合を抽出"""

# 1行目のすべての列
# n6 = n2[1] と書いても同じ
n6 = n2[1, :]
print(n6)
print(n6.shape)

# すべての行の0列目
n7 = n2[:, 0]
print(n7)
print(n7.shape)

#0-1行目、2-3列目
n8 = n2[:2, 2:]
print(n8)
print(n8.shape)

""":2は行方向のスライスで、0から1（2未満）の行を指定<br>2:は列方向のスライスで、インデックスが2から最後までの列を指定

#### True/False配列で抽出
"""

# 0行目と2行目、すべての列
# True / False要素の配列で指定する
n2_index = np.array([True, True, False])
n9 = n2[n2_index]
print(n9)
print(n9.shape)

"""### 2.2.5 演算

#### NumPy変数間の演算
"""

# 演算対象のNumPy変数定義
n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])
n10 = np.array([
    [1, 4, 7, 10],
    [2, 5, 8, 11],
    [3, 6, 9, 12]
])
# 結果確認
print(n2)
print(n10)

# NumPyの行列変数同士の足し算
n11 = n2 + n10

# 結果の確認
print(n11)

"""#### ブロードキャスト機能"""

# 演算元変数
n1 = np.array([1, 7, 5, 2])

print(n1)

# すべての要素から同じ値を引く
n12 = n1 - 4

# 結果確認
print(n12)

# array関数による表形式の変数の定義
n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])

# 結果確認
print(n2)

# 行列変数と数値間の演算
n13 = n2 - 2
print(n13)

# 行列変数とベクトル変数間の演算
n14 = n2 - n1
print(n14)

"""#### ユニバーサル関数"""

# xの配列の準備
x = np.linspace(0, 2, 11)
print(x)

# y=sqrt(x)の計算
y = np.sqrt(x)
print(y)

"""#### 集約関数"""

# array関数による表形式の変数の定義
n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])

# 結果確認
print(n2)

# 集約関数(sum関数)

s0 = n2.sum(axis=0)
s1 = n2.sum(axis=1)
s2 = n2.sum()

print(s0)
print(s1)
print(s2)

"""### 2.2.6 応用例

#### 2つの変数の一致数から精度計算
"""

# 2つのベクトル変数の準備
# ベクトル変数1
yt = np.array([1, 1, 0, 1, 0, 1, 1, 0, 1, 1])
# ベクトル変数2
yp = np.array([1, 1, 0, 1, 0, 1, 1, 1, 1, 1])

# 内容表示
print(yt)
print(yp)

# 配列の各要素を同時に比較する
matched = (yt == yp)
print(matched)

# 更にこの結果にsum関数をかける
# 対象変数がブーリアン型の場合 True→1 False→0に変換される
# 一致数のカウント方法
correct = matched.sum()

# 全体数はlen(correct)で計算可能
total = len(matched)

# 精度の計算
accuracy = correct/total

print(correct)
print(total)
print('一致数: ', correct, '全体数: ', total,  '一致率: ', accuracy)

"""#### ベクトルの数値を一次関数で変換して[0, 1]の範囲に収める"""

# 元変数
n1 = np.array([1, 7, 5, 2])
print(n1)

# 最大値と最小値を集約関数で取得
n1_max = n1.max()
n1_min = n1.min()
print(n1_max, n1_min)

# 変換(ブロードキャスト機能の利用)
n15 = (n1 - n1_min) / (n1_max - n1_min)
print(n15)

"""### 演習問題
行列 n2の最初の列の値が3で割り切れない行を残し、割り切れた行を消す処理をします。  
その処理の結果、残された行をまとめて新しい行列を作ってください。
"""

# array関数による表形式の変数の定義
n2 = np.array([
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
])

# n2の最初の列を抽出し、ベクトル変数a1とします。
a1 = n2[:, 0]
print(a1)

# ブロードキャスト機能を用いて、a1の各要素が
# 3で割った余りを示す配列a2を計算します
a2 = a1 % 3
print(a2)

# 再度ブロードキャスト機能を用いて、a1の各要素が
# 3で割り切れるかどうかを示す配列a3を作ります
a3 = a2 != 0
print(a3)

# 変数a3を用いて、　n2から必要な行だけを残す計算をし
# 結果をa4に代入します。
a4 = n2[a3]
print(a4)

a5 = n2[n2[:, 0] % 3 != 0]
print(a5)

